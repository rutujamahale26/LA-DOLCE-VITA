import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, "Name is required"],
    trim: true,
    minlength: [2, "Name must be at least 2 characters long"]
  },

  email: {
    type: String,
    required: [true, "Email is required"],
    unique: true,
    lowercase: true,
    match: [/^\S+@\S+\.\S+$/, "Please enter a valid email address"]
  },

  phoneno: {
    type: String,
    required: [true, "Phone number is required"],
    match: [/^\d{10}$/, "Phone number must be 10 digits"]
  },

  dob: {
    type: Date,
    required: [true, "Date of Birth is required"],
    validate: {
      validator: function (value) {
        return value < new Date(); // must be in the past
      },
      message: "Date of Birth must be a past date"
    }
  },

  address: {
    street: { type: String, required: [true, "Street is required"] },
    city: { type: String, required: [true, "City is required"] },
    state: { type: String, required: [true, "State is required"] },
    zipcode: { 
      type: String, 
      required: [true, "Zip code is required"],
      match: [/^\d{5,6}$/, "Zip code must be 5 or 6 digits"]
    },
    country: { type: String, required: [true, "Country is required"] }
  },

  accountDetails: {
    customerID: { type: String, required: [true, "Customer ID is required"], unique: true },
    totalSpent: { type: Number, default: 0, min: [0, "Total spent cannot be negative"] },
    totalOrders: { type: Number, default: 0, min: [0, "Total orders cannot be negative"] }
  }
}, { timestamps: true });

// autogenerated customerID
userSchema.pre("save", async function (next) {
  if (!this.accountDetails.customerID) {
    this.accountDetails.customerID = "CUST-" + Date.now() + "-" + Math.floor(1000 + Math.random() * 9000);
  }
  next();
});


export const User = mongoose.model("User", userSchema);
